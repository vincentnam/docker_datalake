import React, {useEffect, useRef, useState} from 'react';
import * as d3 from "d3";
import * as axios from "axios";
import log from "d3-scale/src/log";








export default function D3Histo(props){

    const d3Container = useRef(null);

    // const [books, setBooks] = useState(initialBooks)

    useEffect(
        () => {
            if (props.data && d3Container.current) {
                // const d3 = require("d3")

                axios.get("http://localhost:5000/sensors_data").then(function (response) {
                    console.log(response.data)
                    const width = 600;
                    const height=300;
                    var data = response.data
                    var payload = response.data
                    var values = []
                    var value_units = []
                    var date = []
                    var size = 0
                    for (var device in data){
                        // console.log(device)
                        for (var uri in data[device]){
                            // console.log(uri)
                            for (var sample in data[device][uri]){
                                // console.log(sample)
                                // console.log(data[device][uri][sample])
                                size = values.push(data[device][uri][sample][0])
                                value_units.push(data[device][uri][sample][1])
                                date.push(data[device][uri][sample][2])
                            }
                        }
                    }
                    //
                    // "Mon, 01 Jan 2018 00:01:27 GMT"
                    // "2018-01-01T00:00:00"
                    // const data = [5.1,4.9,8.6,6.2,5.1,7.1,6.7,6.1,5,5,5.2,7.9,11.1,5.9,5.5,5.6,6.5,7.7,5.7,6.7,5.7,4.8,5.6,9.5,5.7,4.7,6.3,5.7,6.6,5.5,5.4,9.3,7.6,6.3,5.6,5.9,5.5,5.2,6,6.4,4.9,5,10.3,7.2,4.9,6.9,6.1,5.1,6.5,8.6,5.6,5.2,10.9,6.7,6.4,5.7,5.3,5,4.2,7.3,6.4,5.1,5.5,7.2,8.3,13.9,7,1.9,2.2,5,14.1,5.6,3.2,8.1,4.9,5.9,7.3,3.6,6.9,4.4,4.8,21.7,9.2,7.4,13.6,6.9,16.5,5.7,9.4,3,3,8.7,5.4,5.4,5.8,16.4,11.8,6.5,6.4,7.6,7.3,7.7,6.6,4.9,7,8.5,5.4,5.9,13,5,24.4,3.2,6.3,4.1,2.7,3.3,5.9,5.1,2.8,6,4.5,5,5.7,4.4,5.7,5.9,3.1,3.7,4.4,3.9,5,5.1,5.7,3.7,3.9,3.9,4,3.2,4,3.7,3.6,3.4,5,5.3,5.9,5.9,4.8,6.2,4.5,4.5,4.9,5.1,4.4,3.2,3,3.8,4.3,7.1,4.5,4.6,3.7,3.6,5.6,4.4,5.5,3.8,4.1,4.7,4.7,3.7,3.5,4.6,5,3,3.7,4.3,3.5,4.8,5.2,4.8,5.6,6.4,2.6,4.8,5.3,4.4,4.6,7.3,5.7,6.6,5.7,10,4.7,7.3,5.1,8.7,7.9,5.1,26.4,4.9,9.7,8.9,6.3,6.1,5.3,8.2,3.5,5.4,5,9.2,6.6,5.2,5.6,4,4.8,4.3,4.7,7.1,6.9,5.7,6.2,6.2,5,3.5,7.7,4.5,3.2,4.8,4,5.7,6.8,6.6,7.1,5.7,4.1,7.9,7.9,7.4,5.9,10.6,6.1,5.7,5.5,8,3.6,4.3,3.2,3.1,1.8,3.1,2.9,3.1,2.4,2.7,3.3,4.9,4.8,3.6,3,4.7,3.2,4.1,2.8,2.5,2.6,3.9,5.1,3.3,2.6,2.3,2.1,2,6.2,2.3,3.1,2.1,1.8,2.6,2.9,2.9,5,2.5,3.3,5.3,1.7,3.6,4.5,3.9,3.5,4.6,3.2,2.7,2.3,2.7,3.5,4.9,5.1,5.1,2.6,5.9,2.4,2.4,2.2,2.1,3.7,2.1,3.5,2.2,5.2,6,4.8,4.8,6.1,5.4,4.8,5.8,5.1,4.5,3.7,6.5,4.4,4.7,4.6,4.2,5.2,4.6,5.9,5.3,6.8,4.4,5.3,4.8,6.1,5.3,5.1,5,5.4,4.1,6.3,5.1,6.9,4.3,4.4,7.2,11.5,6,6.9,4.5,5.6,6.6,5.4,5.3,3.8,4.7,4.7,4.7,5.2,5.4,5.3,4.6,5.9,5,5.6,3.1,4.6,3.9,5.8,4.3,5,5.1,5.1,4.3,5.8,6,3.6,6,4.6,4.5,4.2,6.7,5.1,5.5,4.6,5,4.1,4.1,5,6.9,4.6,5.2,8.3,7.2,4.8,4.6,5,8.1,6.1,5.7,7.6,6.6,4.8,4.8,5.6,7.5,5.2,6,5.7,4.7,5.9,4.8,5.8,5,8.6,6.1,4.1,5.4,9.6,6.4,6,4.4,5.6,5.3,4.8,5.2,4.9,5.5,5.9,5.1,4.5,6.5,5.2,7,5.5,6.8,5.3,6.7,4.5,4.7,6.2,7.4,4.8,5,4.7,5.9,4.1,5.5,5.2,5.4,6.3,5,5.3,5.4,5.9,4.6,5,4.4,8.9,5.6,4.7,5.3,5.8,5.4,5.3,7.3,4.1,4.7,6.3,7,7.1,6,4.6,6.4,5.3,6.4,4.8,5.7,5.7,5.6,5.2,5,7.2,5.5,7.6,4.7,6.9,6.8,5.5,6.3,4.9,7.1,4.8,6.6,6.6,5.8,4,4.5,4.5,6.4,4.8,5.3,5.1,5.7,5.6,6.8,7.7,5.4,8.6,6.5,5.5,6.4,6.9,7.5,6.5,5.9,5.8,7.4,6.6,6.6,5.4,7,7.7,6,6.3,5.6,7.3,6.3,7.3,5,6.4,8.2,4.5,6.2,5.3,4.7,5.4,7,6.3,6.6,8.6,8.5,4.4,5.7,6.8,6.7,6,5.8,4.1,3,3.4,3.4,3.5,4.9,3.6,3.4,4.6,3.7,2.8,4.9,4.3,3.2,4.1,3.7,2.6,4.4,3.2,2.9,3.3,5.9,4.1,4.2,2.9,3.2,4.3,3,4.8,3.1,2.8,4,3.2,4.8,6.9,3.6,2.9,3.1,3.1,3.1,3.7,4.1,4.2,5.9,2,3.4,4.2,5.3,4.7,9.5,4.7,5.8,3.2,5.8,5.7,4.8,4.8,5,5.8,5.5,6.4,4.1,6,5.7,5.6,5,5,5.6,4.6,4.4,6.1,5.2,4.5,6,5.3,8,6.9,7.6,5.3,5.9,6.1,6.9,8.1,5.8,5.4,4.9,5.5,6.2,6.5,5.5,4.4,8.3,5.1,6.1,4.7,5.6,4.8,6.2,7.6,4.8,5.2,5.1,6.8,4.6,5.1,6.6,5.5,6,6.2,5.9,7.1,7.4,3.9,5.3,3.9,6.3,4.6,4.5,5.3,6.6,6.9,4.8,4.4,6.8,8.6,5.2,4.8,5.8,6,6.2,8.1,4.6,4.9,4.3,5.6,6.7,5.6,6,7.1,7.1,6.5,5.2,3.8,8.4,6.2,5.8,5.4,6.2,6.4,4.9,3.8,4.3,3.6,4.3,5.7,3.6,3.8,4.4,4.7,4.4,5,4,5.6,3.6,4.7,3.6,4.2,5.5,3.3,4,5.9,4.4,5.9,4.2,4.8,3.8,5.1,6.6,3.4,4,4.4,3.6,4.7,4.8,4.2,4,5.1,4.7,5,4.8,3.8,4.5,4,3.7,6.6,6,5.6,4.9,4.7,3.9,4.1,4.8,5.1,4.1,4.2,5.3,4.2,4.9,5.2,5.4,5.1,4.9,4.6,5.3,4.3,4.6,4.5,4.5,4.5,4,5,4.9,4,4.2,5.2,3.8,6.1,5.3,4.3,3.8,4.2,4.4,6.5,5.7,4.5,5,4.4,4.6,4.9,3.6,3.9,4,3.4,2.9,4.9,5.7,3.7,4,5.8,3.4,4.2,4.6,4.4,4.5,4.7,3.1,3,3.8,4.4,4.1,4.6,3.4,4.1,4.2,6.1,5.2,3.2,5.3,3.5,3.7,5.9,3.5,4,4.2,5,3.9,3.8,4.1,4.3,3.7,3.6,4,3,4.2,3.7,4.4,3.6,3.2,2.8,3.2,4.5,4,4.6,3.2,4.4,5.1,3,8.1,4.3,4.5,3.8,2.3,3.7,4.3,3.4,4.9,4,3,4.6,5.4,4.2,4.4,3,3.1,6.4,3.9,2.9,3.4,4.1,3.8,4,3.7,3,5.4,3.2,2.4,2.9,4.2,3.9,4.4,4.9,7.4,3.8,3.5,4.6,4.7,4.1,3.6,4.2,3.5,4.5,6.9,4.6,7.4,4.4,5,5.7,4.2,4.6,4.6,5.9,5.2,3.3,3,4.8,5.1,8.2,3.2,5.1,5.4,4.7,4.7,4.7,4.1,3.3,6.8,3.4,4.3,3.5,3.6,4.8,6.4,3,5,3.9,2.6,2.7,5.7,3.2,4,6.3,2.8,2.7,4,4.1,4.5,3.7,3.7,4.8,3.5,6.2,3.9,4.5,4,7,3.2,4.3,3.9,5.9,3.6,2.9,4.3,3.1,6.9,4.3,4.6,3,8.1,4.1,2.9,4.6,4.1,4.5,3.6,3.6,4.1,5,2.6,5.2,3.2,4.8,3.7,5.5,4.7,4.6,4,2.7,5.2,4.9,4.5,2.9,3.8,3.7,5,3.3,4.7,4.9,3.2,4.2,3.8,3.3,3.9,2.6,6.9,6.9,6.1,6.1,3.9,3.6,9,4.3,6.5,8.3,3.5,4.6,8.3,4.5,5.4,8.3,5.7,3.8,4.8,5,4.1,3.5,6.8,5,10.6,4.4,6,4.5,9.7,6.4,5.2,4.6,4,5.4,11.7,5.2,3.3,5.5,10.4,3.6,6.6,4.4,4.3,4.2,6.4,6.2,4,8.8,4.7,4.1,11.6,4.4,4.4,4.5,3.9,5.1,5.5,6.9,4.2,3.6,9.2,3.8,10.5,7.5,3.9,5.8,10.6,8.3,13.2,11.8,8.4,5.6,6.7,4.2,5.6,5.7,7.3,4.5,3.8,16.3,4.3,5.5,9,6,4.7,7.1,4.4,3.8,3.6,6,6.8,6.7,4.3,4.9,6.3,3.1,3.8,8.7,4.3,10.4,10.3,6.9,5,6.1,5.3,5.3,7.6,3.6,3.3,4.2,3.5,4.8,3.9,5,5.4,6.4,3.5,4,6.8,5.5,6.4,9.5,3,7.9,7.5,5.3,9,7.8,6.7,8,5.9,7.4,5.5,8.4,4.8,9.6,7.5,9.2,8,5.7,11.8,6.2,8.5,9.6,7.8,9.7,7.4,6.3,5.9,6.7,6.7,6.7,6.7,7.5,5.3,9.4,10.4,8.1,6.7,6.7,5.9,7.2,6.9,6.8,7.7,7.3,6.9,6,8.5,8.1,7.5,8.9,8.3,10.1,5.7,7.5,10.5,7.3,6.9,7.9,8.1,7.9,9.4,6.1,12,5.5,8.5,3.2,4.8,2.6,4,3.2,3.2,2.7,2.9,4.2,4,4.8,2.6,4.9,3.6,4.6,2.9,6.4,4,4.7,4.1,4.8,3.8,5.3,4.7,6.2,3.9,5.2,4.3,3.4,4.7,3.4,4.6,3.8,4.5,6.5,4,5.2,5.5,5.8,6.9,3.4,3.9,4.7,2.7,3.9,3.3,5.3,3.6,3.2,1.8,3.4,4,3.7,4.1,5.8,6.1,3.3,5,5,6.3,6.8,3.5,4.7,4.6,4.4,4.4,4.4,4.2,3.7,4,6,6,3.4,6.2,5.5,4.5,3.6,4.1,5,5.8,5.5,3.4,4.5,4.9,5.2,4.3,4,3.6,5.8,4.7,4.2,4.6,3.7,5.4,3.2,6.4,6,6.4,3.5,4.4,4.6,4.4,3.1,5.9,4.9,4.9,4.2,4.9,5.1,4.1,4.8,4.3,4.5,7.6,4.8,4.2,4.7,5,6.3,6.6,4.9,5.6,4.9,3,6.6,6.8,4.6,6.5,3.7,5.2,7,4.6,5.3,4.6,3.5,7.3,5.1,5.1,3.8,3.8,4.8,3.7,4,3.3,3.9,4.9,3.4,5.6,4,3.9,3.2,7.6,3.1,7.9,4.3,3.5,3.6,3,3.9,3.7,3.7,3.7,4.1,3.5,3.4,5.5,4.2,7.7,4,5.1,3.5,4.2,7.7,3.9,4.3,4.5,3.7,3.2,3.4,4.1,5.2,5.6,3.9,4,4.8,4.5,3,3.3,2.9,3.6,4.6,3,3.6,4.3,4.8,3,4.4,2.8,3.8,6.3,4,5.2,3.6,2.2,4.3,5.7,3.2,3.6,3.7,3.5,3.8,2.7,4.8,3.9,3,3.2,5.1,4,3.4,5.1,3.4,3.7,3.5,3.7,8.2,5,7.1,6.5,6.5,7.4,5.2,7.3,6.3,5.3,12.3,6.4,7.8,8.1,6.4,5.6,4.1,5.8,6.8,7.7,8,4.9,5.9,5.3,5.2,10.9,11.2,9.9,4.8,6.4,7.8,15.4,9.3,5.9,8.2,4.9,4.5,5.8,7.4,5.6,4.8,9,5.8,5.9,4.2,6.8,5.7,6.3,6.3,5.4,5.9,8,5.6,6.7,5.9,7,6.7,4.5,5.3,8.3,3.8,4.5,8,5.5,5.1,6.8,8.4,5.7,5.4,5.2,5.1,6.1,4.2,7.9,6.4,9.2,7.6,6.1,10.1,7.4,6,7,6.7,4.5,5.9,5.1,5.3,6,6,7.3,6.2,4.1,4.9,6.9,5.6,5.2,5.5,5.3,5.9,7.8,5,6.4,5.1,4.5,8.7,4.5,5,4.6,5.7,5.9,5.6,6.5,4.6,5.1,6.6,7.3,9.1,4.9,5,4.7,4.6,5.6,4.7,5.9,6.6,4,5.4,7.2,8.4,6,5.2,4.9,6.1,4.1,6.2,4.9,5.4,4.9,4.8,9,4.5,4.9,6,6.9,6.8,5,5,5.4,7.7,4.9,5.5,5.1,6.4,9.9,5.5,6,7,4.2,8.8,9.9,4.3,6.1,5.6,5.4,4.4,6.4,6.8,5.1,4.4,6.6,5.5,8.1,8.4,4.1,7.3,5.8,6.7,5.1,5.8,7.6,4.6,6.9,8,4.8,7.1,6,7.4,6.1,7.6,5.8,4.6,7.2,6.1,5.9,3.6,7.3,6.6,2.9,7.7,4.4,4.3,3.5,2.4,3.8,3.6,3.7,2.3,4,4.2,3.1,3.3,4.8,2.3,2.4,9,3.2,5.5,4.9,4.5,2.7,4.8,3.3,3.1,7.9,2.1,3.1,4.2,7.1,3.5,4.3,3.3,3.1,4.6,4.7,2.5,4.5,3,4.5,4.9,6.2,6.8,7,3.2,4.3,3.9,2.9,3.5,3.3,4.1,3,4.9,4.6,3.7,3.3,2.5,5.4,4.2,4.1,2.8,3.6,2.8,3.5,2.8,3.6,3.2,3.5,2.8,2.5,2.5,3.3,3,3.2,3.2,2.6,4.5,3.4,3,3.4,3.4,3.3,3.5,2.5,2.8,3.3,2.8,3.3,3.5,3.2,2.7,2.7,2.6,3.7,3.4,2.9,2.9,2.8,4.1,3.1,2.7,2.9,2.7,3.1,2.4,3,2.3,4.3,2.8,3,3.2,3,3.7,2.5,3,3.7,3.5,2.9,4.3,3,3.6,2.4,2.5,2.8,2.5,3.5,2.7,3.2,3.3,2.6,3.1,3.1,3.2,3.8,3.1,3.4,3.3,2.6,2.7,2.8,3.2,4.6,2.9,3.2,3.4,3.7,2.7,2.9,5.8,6,5.3,4.4,4.7,5.1,5.5,5.9,5.3,7.3,8.6,7.5,6,5.8,4.9,4.6,6,2.6,2.8,2.9,3.5,2.4,3.2,2.6,3.1,2.7,2.5,7.1,4.7,5,6,5.7,7.9,6.6,5.6,5.2,4.1,4.9,4.9,4.8,4.2,5.4,6.8,6.8,4.4,5,5.6,5.1,6.2,6.9,6.9,9.1,5.6,5.4,5,7.1,7.2,6.6,6.4,7.3,5.4,9.8,6,4.5,10,9.8,8,6.4,7,7.3,6.1,7.1,9.4,8.1,5.5,7.8,8,8.3,9.3,4.5,7.6,4,4.9,7.8,5,5.2,4.4,5.1,5.2,4.4,5.1,3.3,4.6,4.9,4,4.6,4.1,4.8,5.2,3.8,4.5,2.9,4.4,5.1,5.9,5.4,4.2,4.6,4.6,5.2,3.8,4.9,5.2,4.3,4.2,3.7,4.2,5.2,5.7,4.3,3.9,5,4.1,5.9,4.1,5.8,3.5,4.2,4.7,4.6,3.8,5,4.3,4.1,4.5,3.7,4.3,4.1,3.8,4.5,4.2,4.1,3.7,4.8,4.5,5.1,5.9,4.5,4.8,5.6,6.4,6.7,5.7,3.9,5.1,4.6,5.3,5.3,4.7,5.5,4.9,4.3,5.4,6.5,5.1,5.6,6.1,5.1,6.3,4.6,4.2,4.9,4.6,5.4,4.5,8.5,4.9,5.1,5.3,5.2,7.1,4.4,5,5.3,7.8,5.8,4.4,4.3,6.5,6.5,6.4,4.7,5.1,4.5,5.1,5.7,5.4,4.6,4.6,5.1,4.9,6.8,4.7,6,5.2,5,6.8,4.7,7.3,5.4,4.5,5.1,6.2,5.2,6.3,5.4,5.7,4.9,4.8,6.9,7.3,5.5,5.5,6.6,5.6,8.9,4.7,4.9,4.8,4.9,4.8,6.2,4.4,7.3,4.2,7,6.9,4.7,5.6,4.7,8.1,4.4,5.1,2.3,3.2,3.1,2.5,3.2,1.8,3.8,2.3,2,1.9,1.8,2,2.2,2.8,3.1,2.5,2.4,2.3,2.1,2.3,2.9,2.6,2,2.9,4.1,2.4,3.1,3.1,4.5,2.9,2.9,2.9,5.3,4.5,3,2.5,1.9,3.5,2.7,14.2,1.6,3.7,5.3,2.3,3.3,1.7,2.1,2,2.7,3.6,3.5,2.7,3.7,6.8,4.6,4.3,5.3,6,3.5,6.3,5,4.2,6,4.1,4.7,4.1,5.4,6,6.2,5.5,5.5,3.7,4.3,3.4,4.6,3.9,3.9,3.9,4,6.4,4.4,4.2,5.8,4.2,3.5,4.9,6.4,4.2,5.5,4.5,3.3,5,7,7.4,4.1,4.8,6.1,4.1,3.9,5.9,4.9,3.5,5.8,4.7,4.3,7.6,3,4,9.1,4.6,6.8,4.4,5.3,7.3,4.6,4.2,5.5,4.2,6.8,4.5,4.3,3.2,4.9,4.8,4.1,7,4.4,3.7,4.9,4.7,6,5,3.5,3.7,5.9,3.9,6.4,3.6,4.1,4,3.4,5.8,3.6,7.1,3.2,7.7,3.7,4.3,5.6,4.3,5.4,5.6,8.3,2.7,4,7.5,4.8,5.2,4.9,6.3,4.9,5.2,4.1,3.7,4.5,5.7,5.2,3.1,7.9,3.6,4.3,8.8,7.5,4.9,8,6.5,6.7,3.6,5.6,9.7,7.4,5.5,4.3,3.3,4.3,7.7,9.5,4.3,5.1,5.5,4.3,6,4,6.5,6.1,4.5,7.4,6.1,5.3,7.1,3.9,6.5,4.2,5,7.7,5.4,5.6,7.3,6.5,10.4,3.5,4.5,5.2,5.2,5,7.2,3.3,6.4,6.7,5,5.2,5.1,7.1,7.3,6.9,7,5.1,7.3,7.1,6.1,5.9,4,6.8,6.6,7.4,7.2,5.7,6.2,5.9,6.7,6.1,5.9,5.8,5,6,4.3,5.2,5.9,6.3,5,5.9,5,4.9,5.4,4.5,5.9,8,6.8,5.8,5.6,5.7,6.5,5.2,5.7,7.7,8.2,6.7,4.8,4.6,7.2,7.5,7.3,6.2,6.7,4.7,5.3,5.6,6.7,7.1,8.5,8.5,5.7,6.3,8.1,7.1,8.3,7.3,5.8,6.4,4.8,7,5.1,6.3,6.9,7,7.2,6.8,6,6.9,4.7,4.9,5.9,6.6,5.1,7.7,6.8,7.8,6.7,5.1,7.5,7,5.4,7.4,5.4,8,5.9,6.6,5.6,6.6,6.2,5.2,5,5.3,4.8,6.3,5,6.1,5.6,9.1,5.2,11.4,8,5.1,5,7.4,4.5,6.6,8.4,5.7,7.1,5.8,6.8,7.1,4.9,6.1,7.7,5.8,6.6,4.7,5.8,6.2,5.4,4.7,5.8,6,5.6,8.2,4.5,5.8,8.6,9.1,4.8,5.5,11.3,5.6,5.4,4.8,5.3,6.5,6.5,7.9,5.2,1.9,2.3,4,2.4,2.5,2.4,2.5,9.8,2.9,2.5,3,2.9,2.7,2.6,5.5,3.1,1.9,3.6,3.2,14.1,2.2,2.1,3.8,2.5,2.5,2.6,2.1,2.4,1.9,3.2,2.1,2,2,2.8,2.8,2.4,2.4,2.1,3,2.9,1.8,5,2.1,3.6,2.8,2.7,3.8,2.4,2.2,3.6,13.2,2.6,2.8,2.3,3.3,2.5,2.6,2,1.9,6.8,1.9,2.4,2.9,4.3,2.3,5.6,5.1,5.3,7.4,6.6,4.5,4.7,6.7,4.9,7.1,5.9,4,5.7,6.4,6.4,6,4.9,5.2,5.9,3.8,7.3,5.8,4.4,6.1,5.3,6,5.7,6.2,4.3,5.4,5.8,6.6,5.3,5,8,6.2,6.2,5.5,6.5,7,6,4.6,7.7,6.2,7.3,5.4,4.9,4.3,7.3,7.8,5.9,5.8,4.4,4.8,5.8,7.4,4.5,5.3,6.7,4.8,4.2,7.2,5.5,5.5,4.2,6.6,7.5,5.6,6.2,5.7,5.8,5.2,7.5,5.8,4.4,4,7.4,6.1,4.2,5.8,4.6,6.8,5.5,4.1,5.9,4.9,6.9,5.9,5.8,4.8,5.1,6.2,7.3,5.4,3.7,4,4.8,4.9,6.6,5.9,4.5,3.5,5.7,5.9,4.6,4.3,4.1,3.5,8.5,4.8,4.1,3.3,3.4,4.7,5.4,5.7,3.9,4.3,4.8,12.5,4.8,5.2,3.8,4.5,5.5,4.6,7.6,7.8,3.5,8.2,3.5,6.8,5.5,3.5,4.5,6,3.9,6.4,3.8,3.6,5.3,4.2,4.6,3.2,4.2,4.9,5,9.1,6.7,5.1,4.1,2.5,4.2,6,3.5,4.3,3.7,6,5.7,7.4,5.3,12.1,5.7,6.8,5.2,4.1,5.4,4.7,4.6,4.1,4.1,4.7,5.5,4.6,5.7,5.5,7.2,5.4,3.7,5.9,3.8,3.1,4.3,5.7,4.6,7.3,4,6.8,7.6,4,6.4,8.2,5.3,3.2,4.2,6.8,5.8,6.7,2.1,5.1,3.7,3.8,5.3,8.4,4.8,5.1,5,4.5,5,6.1,7,4.5,6.7,3.3,5.2,5.3,8.8,2.9,7.6,9.9,11.3,4.7,6.2,5.3,4,3.6,5.4,2.9,3.9,3.9,3.6,6.6,7.9,5.3,5.4,7.1,4.6,5.7,4.7,4.2,7.3,8.5,6.2,5.1,5.5,4.3,4.4,3.7,4.5,5.1,4.4,2.2,4.8,7.7,4.8,3.7,7.6,11.4,4.8,5,4.6,5.6,4.6,7.3,5.1,5.5,3.2,13.1,3.9,5.5,4.6,7.9,5.1,5.9,5.4,3.4,7.5,5.9,7.5,4.3,2.8,5.9,7.1,3.6,11.9,4.5,3.2,7.7,5.3,6.6,6.1,7.4,4.9,5.5,3.9,4.8,6.4,9.8,9.6,6.9,7.8,3.9,5.9,6.3,4,6.5,3.4,5.1,5.1,14.1,5.9,3.8,4.9,8.5,4.7,4.2,4,4.1,5.5,4,7.2,4.7,3.4,6.7,8.2,7.3,5,5.6,6.7,4.6,5.7,6.2,6.4,5.8,5.6,5.2,5.4,4.4,4.6,5.4,13.3,3.6,4.2,8.5,5.1,5.8,5,4.8,11.2,17.3,6.1,3.3,3,6.1,3.4,3.1,8.6,5.9,5.3,3.5,4.6,3.4,2.8,3.2,2.8,4.8,2.2,3.2,7.3,4,4.2,2.9,3.9,9.8,3.1,3,3.5,5.3,3.7,3.1,4,4.2,2.7,5.2,3.2,3.7,3.7,2.9,4.5,4,3.1,3.3,3.1,4.3,3.6,4.9,4.3,4.6,4.7,2.6,3.6,3.6,4.1,6.4,3.5,5.9,10.9,5.1,4.5,4.3,5.9,4.4,5.2,3.8,3.3,4.4,3.8,4.6,10,4.8,4.7,3.2,3.4,4.4,3.4,4.3,3.4,6.9,3.6,3.6,5.2,3.2,5.1,6.2,3.5,3.9,5.4,3,4.4,3.8,4.2,4.1,3.7,4.4,6.9,3.2,3.7,4.6,3.1,3.8,5.6,3.7,4.5,3.5,3.3,5,4.4,4,3.9,4.5,4.5,4.9,3.6,5.6,4.9,3.6,10,3.5,3.3,3.6,4.3,3.6,6.5,4.6,3.6,5.6,3.8,4.1,4,5.6,5.9,8.1,3.9,4.6,4.2,8.7,7,4,2.9,5.2,5.1,3.5,4.4,4.5,5.8,6.6,6.4,3.1,2.7,5.9,4.7,5.1,5.7,5.2,6.5,7.4,5.5,3.5,3.5,6.8,5.1,5.4,7.2,7.4,3.6,6.2,6.7,4.7,4.4,4,3.9,4.7,4,4.1,5.9,3.9,4.8,4.7,6.5,5.1,7.6,6.6,5.9,7.6,6.6,9.8,6.5,5.3,6.6,8.7,6,7.2,3.9,5.9,5.8,6.5,8.1,4.1,8.3,6.1,7.7,8.9,6.5,3.9,6.7,6.7,4.3,6.3,7.9,5.9,8.4,5.6,6.3,5.5,7.3,5.8,4,8.5,6.9,6.5,4.8,8.5,9.1,4.9,6.8,6.8,6.1,4.5,4.1,6.5,5.3,5.4,5.9,3.4,5.2,7.1,7.4,10,13.1,6,7,7,6.7,6,11.7,4.5,4.5,4.5,8.5,5.3,3.5,7.5,5.1,5.2,4.6,6.3,5.3,5.9,8.5,5.5,5.2,4.8,8.1,7,6.3,8.2,8.1,8.1,5.7,9.4,5.6,5.1,3.9,5.8,3.6,4.2,4.9,3.4,3.6,3.2,3.3,4.3,2.8,3.7,3.4,5.2,3.8,3.4,5.5,3.6,6.2,3.7,3.1,3.9,3,7,3.7,3.9,4,4.8,3.1,3.7,2.9,5.4,4.3,4.3,3.4,5.2,4.7,8.6,5.5,3.5,3.9,4.3,3.5,3.4,3.2,3.8,3.8,3.5,3.8,5.3,3.4,4.3,4.5,3.5,3.1,5.6,3.9,3.3,3.5,3.4,3.1,4.5,4,4.6,3.4,3.6,3.7,4.6,3.7,4.7,3.3,4.4,6.8,4.1,6,4,6.6,3.3,4.3,4.4,4,3.8,6.8,3.3,3.7,4.6,4,5.4,5.7,2,5.3,4.5,4.9,15.7,14.5,14.9,14.5,15.1,13,13.7,18.7,15,14.1,9.2,12.9,10.7,12.8,12.4,8.8,9.9,11.2,13.4,16.9,10.6,19.5,13.7,12.6,3.8,8.5,13.8,15.4,17.9,17.3,18.1,6.3,9.2,14.1,12.7,14.2,14.3,12.5,15.8,13.4,18.8,17.8,13.7,14.7,12.7,15,12.2,13.7,17.7,14.5,15.6,14.3,12.8,13.6,15.4,20.6,16.9,13.8,16.1,13.3,11.5,16.5,23.4,15.4,8.2,13.2,18.1,20.6,8.9,9.1,7.6,15.3,12,14.3,11.3,19.6,16.6,18]

                    const svg = d3.select(d3Container.current).append("svg").attr("viewBox", [0, 0, width, height]);
                    const margin = ({top: 20, right: 20, bottom: 30, left: 40})
                    const bins = d3.bin().thresholds(40)(values)
                    // Changer pour un dictionnaire !
                    var date_deb = new Date(date[0] * 1000)
                    var date_fin = new Date(date[date.length -1] * 1000)
                    const x = d3.scaleTime()
                        .domain([date_deb, date_fin]).nice()
                        .range([margin.left, width - margin.right])
                    console.log(date_fin)
                    console.log(date_deb)
                    const y = d3.scaleLinear()
                        .domain([Math.min(...values)-1, (Math.max(...values)+1)]).nice()
                        .range([height - margin.bottom, margin.top])


                    var xAxis = g => g
                        .attr("transform", `translate(0,${height - margin.bottom})`).call(d3.axisBottom(x))
                        .call(g => g.append("text")
                            .attr("x", width - margin.right)
                            .attr("y", -4)
                            .attr("fill", "currentColor")
                            .attr("font-weight", "bold")
                            .attr("text-anchor", "end"))


                    var yAxis = g => g
                        .attr("transform", `translate(${margin.left},0)`)
                        .call(d3.axisLeft(y))
                        .call(g => g.select(".domain").remove())
                        .call(g => g.select(".tick:last-of-type text").clone()
                            .attr("x", 4)
                            .attr("text-anchor", "start")
                            .attr("font-weight", "bold")
                            .text(data.y))
                    //
                    const line = d3.line()
                        .x(d => x(d[2]))
                        .y(d => y(d[0]));
                    //

                    // // // invalidation.then(() => simulation.stop());
                    // svg.append("g")
                    //     .data(values)
                    //     .attr("class","line")
                    //     .attr("d",line)
                    // ;
                    // // invalidation.then(() => simulation.stop());
                    //
                    // svg.append("g")
                    //     .attr("fill", "steelblue")
                    //     .selectAll("rect")
                    //     .data(bins)
                    //     .join("rect")
                    //     .attr("x", d => x(d.x0) + 1)
                    //     .attr("width", d => Math.max(0, x(d.x1) - x(d.x0) - 1))
                    //     .attr("y", d => y(d.length))
                    //     .attr("height", d => y(0) - y(d.length));
                    //
                    // svg.append("g")
                    //     .call(xAxis);
                    //
                    // svg.append("g")
                    //     .call(yAxis);
                    // var xaxisticks = d3.extent(x.ticks())
                    svg.selectAll("circle")
                        .data(values)
                        .join("circle")
                        .attr("y", 10000)
                        .attr("x", 10000)//d => d[1])
                        .attr("r",  100)

                    // svg.selectAll("line").data(y.ticks(10)).enter().join("line")
                    //     .attr("class", "horizontalGrid")
                    //     .attr("x1", 0)
                    //     .attr("x2", width)
                    //     .attr("y1", d => y(d))
                    //     .attr("y2", d => y(d));
                    svg.exit()
                        .remove();

                }
            )


            }
        },

        /*
            useEffect has a dependency array (below). It's a list of dependency
            variables for this useEffect block. The block will run after mount
            and whenever any of these variables change. We still have to check
            if the variables are valid, but we do not have to compare old props
            to next props to decide whether to rerender.
        */
        [props.data, d3Container.current])





    return        <div
        className="d3_histogram"

        ref={d3Container}
    />
}

